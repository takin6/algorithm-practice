
import pprint


N = int(input())
A = list(map(int, input().split()))
assert len(A) == N
 
# (index, value) in descending order
A = sorted(enumerate(A), reverse=True, key=lambda x: x[1]) 
# dp = [ [0] * (N+1) for _ in range(N+1) ]
dp = [[0] * (N + 1) for _ in range(N + 1)]



# 解法１：大きい方からiこまでの左右を決めたときの左をl, 右をr回使った時の最大値
for i in range(N):
  idx, value = A[i]
  for l in range(i+1):
    r = i-l
    # left
    dp[i+1][l+1] = max(dp[i+1][l+1], dp[i][l] + (idx-l)*value)
    # right
    dp[i+1][l] = max(dp[i+1][l], dp[i][l] + ((N-1-r)-idx)*value)

res = 0
for i in range(N+1):
  res = max(res, dp[N][i])

pprint.pprint(dp)
print(res)

# [[0, 0, 0, 0, 0, 0, 0],
#  [18, 12, 0, 0, 0, 0, 0],
#  [38, 37, 7, 0, 0, 0, 0],
#  [48, 52, 37, 2, 0, 0, 0],
#  [47, 52, 54, 38, 2, 0, 0],
#  [44, 51, 55, 56, 39, 2, 0],
#  [39, 49, 55, 58, 58, 40, 2]]

# 解法２：dp[ i ][ j ] := A が大きい順に i + j 個について、i 個を左詰めして、j 個を右詰めしたときのスコア

# for i in range(N):
#   for j in range(N):
#     if i + j >= N: continue

#     idx, value = A[i+j]
#     if i == 1 and j == 1: import pdb; pdb.set_trace()
#     # left
#     dp[i+1][j] = max(dp[i+1][j], dp[i][j] + value*(idx-i))

#     # right
#     dp[i][j+1] = max(dp[i][j+1], dp[i][j] + value*((N-1-j) - idx))

#   print(i,j)
#   pprint.pprint(dp)


# pprint.pprint(dp)
# res = 0
# for i in range(N+1):
#   res = max(res, dp[i][N-i])

# print(res)

# 0 5
# [[0, 18, 38, 48, 47, 44, 39],
#  [12, 18, 43, 51, 51, 49, 0],
#  [0, 0, 0, 0, 0, 0, 0],
#  [0, 0, 0, 0, 0, 0, 0],
#  [0, 0, 0, 0, 0, 0, 0],
#  [0, 0, 0, 0, 0, 0, 0],
#  [0, 0, 0, 0, 0, 0, 0]]

# 1 5
# [[0, 18, 38, 48, 47, 44, 39],
#  [12, 37, 52, 52, 51, 49, 0],
#  [7, 37, 54, 55, 55, 0, 0],
#  [0, 0, 0, 0, 0, 0, 0],
#  [0, 0, 0, 0, 0, 0, 0],
#  [0, 0, 0, 0, 0, 0, 0],
#  [0, 0, 0, 0, 0, 0, 0]]

# 2 5
# [[0, 18, 38, 48, 47, 44, 39],
#  [12, 37, 52, 52, 51, 49, 0],
#  [7, 37, 54, 55, 55, 0, 0],
#  [2, 38, 56, 58, 0, 0, 0],
#  [0, 0, 0, 0, 0, 0, 0],
#  [0, 0, 0, 0, 0, 0, 0],
#  [0, 0, 0, 0, 0, 0, 0]]

# 3 5
# [[0, 18, 38, 48, 47, 44, 39],
#  [12, 37, 52, 52, 51, 49, 0],
#  [7, 37, 54, 55, 55, 0, 0],
#  [2, 38, 56, 58, 0, 0, 0],
#  [2, 39, 58, 0, 0, 0, 0],
#  [0, 0, 0, 0, 0, 0, 0],
#  [0, 0, 0, 0, 0, 0, 0]]

# 4 5
# [[0, 18, 38, 48, 47, 44, 39],
#  [12, 37, 52, 52, 51, 49, 0],
#  [7, 37, 54, 55, 55, 0, 0],
#  [2, 38, 56, 58, 0, 0, 0],
#  [2, 39, 58, 0, 0, 0, 0],
#  [2, 40, 0, 0, 0, 0, 0],
#  [0, 0, 0, 0, 0, 0, 0]]

# 5 5
# [[0, 18, 38, 48, 47, 44, 39],
#  [12, 37, 52, 52, 51, 49, 0],
#  [7, 37, 54, 55, 55, 0, 0],
#  [2, 38, 56, 58, 0, 0, 0],
#  [2, 39, 58, 0, 0, 0, 0],
#  [2, 40, 0, 0, 0, 0, 0],
#  [2, 0, 0, 0, 0, 0, 0]]